{"ast":null,"code":"import Web3 from 'web3'; // import auctionContractBuild from 'contracts/auction.json'\n\nimport auctionContractBuild from './build/contracts/Auction.json';\nlet currentAccount;\nlet auctionContract;\nlet isInitialized = false;\nexport const initWeb3 = async () => {\n  const {\n    ethereum\n  } = window;\n\n  if (!ethereum) {\n    console.log('Please install Metamask..');\n    return;\n  } else {\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Found account! Address: ', accounts[0]);\n\n      if (accounts.lenght !== 0) {\n        console.log('Authorized account found...');\n        currentAccount = accounts[0];\n      } else {\n        console.log('No authorized account found!');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**\n   * log when account is changed\n   */\n\n\n  ethereum.on('accountsChanges', accounts => {\n    currentAccount = accounts[0];\n    console.log('Account changed to: ', accounts[0]);\n  });\n  const web3 = new Web3(ethereum);\n  const networkId = await web3.eth.net.getId();\n  console.log(networkId, \" eth net \", auctionContractBuild.networks);\n  auctionContract = new web3.eth.Contract(auctionContractBuild.abi, auctionContractBuild.networks[networkId].address);\n  isInitialized = true;\n};\nexport const callContract = async () => {\n  if (!isInitialized) await initWeb3();\n  return auctionContract.methods.addItem(50, \"socks\", \"Very colorful socks for nice sunny day\", \"somesite\").send({\n    from: currentAccount\n  });\n};\nexport const getItems = async () => {\n  if (!isInitialized) await initWeb3();\n  return auctionContract.methods.catalogue(100).call({\n    from: currentAccount\n  });\n};","map":{"version":3,"sources":["/home/hexx/Downloads/cbigold-develop/client/src/web3Client.js"],"names":["Web3","auctionContractBuild","currentAccount","auctionContract","isInitialized","initWeb3","ethereum","window","console","log","accounts","request","method","lenght","error","on","web3","networkId","eth","net","getId","networks","Contract","abi","address","callContract","methods","addItem","send","from","getItems","catalogue","call"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;AACA,IAAIC,cAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,aAAa,GAAG,KAApB;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAEhC,QAAM;AAAEC,IAAAA;AAAF,MAAeC,MAArB;;AAEA,MAAI,CAACD,QAAL,EAAe;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AAEH,GAJD,MAIO;AACH,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCC,QAAQ,CAAC,CAAD,CAAhD;;AAEA,UAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvBL,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAP,QAAAA,cAAc,GAAGQ,QAAQ,CAAC,CAAD,CAAzB;AACH,OAHD,MAGO;AACHF,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH;AACJ,KAVD,CAUC,OAAMK,KAAN,EAAY;AACTN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACH;AACJ;AAED;AACJ;AACA;;;AACIR,EAAAA,QAAQ,CAACS,EAAT,CAAY,iBAAZ,EAAgCL,QAAD,IAAY;AACvCR,IAAAA,cAAc,GAAGQ,QAAQ,CAAC,CAAD,CAAzB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,QAAQ,CAAC,CAAD,CAA5C;AACH,GAHD;AAKA,QAAMM,IAAI,GAAG,IAAIhB,IAAJ,CAASM,QAAT,CAAb;AACA,QAAMW,SAAS,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ,EAAuB,WAAvB,EAAoChB,oBAAoB,CAACoB,QAAzD;AACAlB,EAAAA,eAAe,GAAG,IAAIa,IAAI,CAACE,GAAL,CAASI,QAAb,CAAsBrB,oBAAoB,CAACsB,GAA3C,EAAgDtB,oBAAoB,CAACoB,QAArB,CAA8BJ,SAA9B,EAAyCO,OAAzF,CAAlB;AAEApB,EAAAA,aAAa,GAAG,IAAhB;AACH,CAtCM;AAwCP,OAAO,MAAMqB,YAAY,GAAG,YAAY;AACpC,MAAG,CAACrB,aAAJ,EACI,MAAMC,QAAQ,EAAd;AAEJ,SAAOF,eAAe,CAACuB,OAAhB,CAAwBC,OAAxB,CAAgC,EAAhC,EAAoC,OAApC,EAA6C,wCAA7C,EAAuF,UAAvF,EAAmGC,IAAnG,CAAwG;AAACC,IAAAA,IAAI,EAAC3B;AAAN,GAAxG,CAAP;AACH,CALM;AAOP,OAAO,MAAM4B,QAAQ,GAAG,YAAY;AAChC,MAAG,CAAC1B,aAAJ,EACI,MAAMC,QAAQ,EAAd;AAEJ,SAAOF,eAAe,CAACuB,OAAhB,CAAwBK,SAAxB,CAAkC,GAAlC,EAAuCC,IAAvC,CAA4C;AAACH,IAAAA,IAAI,EAAE3B;AAAP,GAA5C,CAAP;AACH,CALM","sourcesContent":["import Web3 from 'web3'\n// import auctionContractBuild from 'contracts/auction.json'\nimport auctionContractBuild from './build/contracts/Auction.json'\nlet currentAccount\nlet auctionContract\nlet isInitialized = false\n\nexport const initWeb3 = async () => {\n\n    const { ethereum } = window\n\n    if (!ethereum) {\n        console.log('Please install Metamask..')\n        return\n\n    } else {\n        try {\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n            console.log('Found account! Address: ', accounts[0])\n\n            if (accounts.lenght !== 0) {\n                console.log('Authorized account found...')\n                currentAccount = accounts[0]\n            } else {\n                console.log('No authorized account found!')\n            }\n        }catch(error){\n            console.log(error)\n        }\n    }\n\n    /**\n     * log when account is changed\n     */\n    ethereum.on('accountsChanges', (accounts)=>{\n        currentAccount = accounts[0]\n        console.log('Account changed to: ', accounts[0])\n    })\n\n    const web3 = new Web3(ethereum)\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId, \" eth net \", auctionContractBuild.networks)\n    auctionContract = new web3.eth.Contract(auctionContractBuild.abi, auctionContractBuild.networks[networkId].address)\n\n    isInitialized = true;\n}\n\nexport const callContract = async () => {\n    if(!isInitialized)\n        await initWeb3()\n\n    return auctionContract.methods.addItem(50, \"socks\", \"Very colorful socks for nice sunny day\", \"somesite\").send({from:currentAccount})\n}\n\nexport const getItems = async () => {\n    if(!isInitialized)\n        await initWeb3()\n\n    return auctionContract.methods.catalogue(100).call({from: currentAccount});\n}"]},"metadata":{},"sourceType":"module"}