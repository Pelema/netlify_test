{"ast":null,"code":"import _regeneratorRuntime from\"/home/hexx/Desktop/blockchain-developer-bootcamp-final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hexx/Desktop/blockchain-developer-bootcamp-final-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';// import auctionContractBuild from 'contracts/auction.json'\nimport auctionContractBuild from'./build/contracts/Auction.json';var currentAccount;var auctionContract;var isInitialized=false;export var initWeb3=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,accounts,web3,networkId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=6;break;}console.log('Please install Metamask..');return _context.abrupt(\"return\");case 6:_context.prev=6;_context.next=9;return ethereum.request({method:'eth_requestAccounts'});case 9:accounts=_context.sent;console.log('Found account! Address: ',accounts[0]);if(accounts.lenght!==0){console.log('Authorized account found...');currentAccount=accounts[0];}else{console.log('No authorized account found!');}_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](6);console.log(_context.t0);case 17:/**\n     * log when account is changed\n     */ethereum.on('accountsChanges',function(accounts){currentAccount=accounts[0];console.log('Account changed to: ',accounts[0]);});web3=new Web3(ethereum);_context.next=21;return web3.eth.net.getId();case 21:networkId=_context.sent;console.log(networkId,\" eth net \",auctionContractBuild.networks);auctionContract=new web3.eth.Contract(auctionContractBuild.abi,auctionContractBuild.networks[networkId].address);isInitialized=true;case 25:case\"end\":return _context.stop();}}},_callee,null,[[6,14]]);}));return function initWeb3(){return _ref.apply(this,arguments);};}();export var addItem=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(title,base_price,description,img_url){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(isInitialized){_context2.next=3;break;}_context2.next=3;return initWeb3();case 3:return _context2.abrupt(\"return\",auctionContract.methods.addItem(base_price,title,description,img_url).send({from:currentAccount}));case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function addItem(_x,_x2,_x3,_x4){return _ref2.apply(this,arguments);};}();export var getItems=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(isInitialized){_context3.next=3;break;}_context3.next=3;return initWeb3();case 3:return _context3.abrupt(\"return\",auctionContract.methods.get().call({from:currentAccount}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getItems(){return _ref3.apply(this,arguments);};}();export var placeBid=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(itemId,amount){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(isInitialized){_context4.next=3;break;}_context4.next=3;return initWeb3();case 3:return _context4.abrupt(\"return\",auctionContract.methods.bid(itemId,amount).send({from:currentAccount}));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function placeBid(_x5,_x6){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/hexx/Desktop/blockchain-developer-bootcamp-final-project/client/src/web3Client.js"],"names":["Web3","auctionContractBuild","currentAccount","auctionContract","isInitialized","initWeb3","window","ethereum","console","log","request","method","accounts","lenght","on","web3","eth","net","getId","networkId","networks","Contract","abi","address","addItem","title","base_price","description","img_url","methods","send","from","getItems","get","call","placeBid","itemId","amount","bid"],"mappings":"qXAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,gCAAjC,CACA,GAAIC,CAAAA,cAAJ,CACA,GAAIC,CAAAA,eAAJ,CACA,GAAIC,CAAAA,aAAa,CAAG,KAApB,CAEA,MAAO,IAAMC,CAAAA,QAAQ,0FAAG,wLAECC,MAFD,CAEZC,QAFY,SAEZA,QAFY,IAIfA,QAJe,yBAKhBC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EALgB,8EAUWF,CAAAA,QAAQ,CAACG,OAAT,CAAiB,CAAEC,MAAM,CAAE,qBAAV,CAAjB,CAVX,QAUNC,QAVM,eAWZJ,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAwCG,QAAQ,CAAC,CAAD,CAAhD,EAEA,GAAIA,QAAQ,CAACC,MAAT,GAAoB,CAAxB,CAA2B,CACvBL,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACAP,cAAc,CAAGU,QAAQ,CAAC,CAAD,CAAzB,CACH,CAHD,IAGO,CACHJ,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACH,CAlBW,iFAoBZD,OAAO,CAACC,GAAR,cApBY,QAwBpB;AACJ;AACA,OACIF,QAAQ,CAACO,EAAT,CAAY,iBAAZ,CAA+B,SAACF,QAAD,CAAY,CACvCV,cAAc,CAAGU,QAAQ,CAAC,CAAD,CAAzB,CACAJ,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAoCG,QAAQ,CAAC,CAAD,CAA5C,EACH,CAHD,EAKMG,IAhCc,CAgCP,GAAIf,CAAAA,IAAJ,CAASO,QAAT,CAhCO,wBAiCIQ,CAAAA,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,KAAb,EAjCJ,SAiCdC,SAjCc,eAkCpBX,OAAO,CAACC,GAAR,CAAYU,SAAZ,CAAuB,WAAvB,CAAoClB,oBAAoB,CAACmB,QAAzD,EACAjB,eAAe,CAAG,GAAIY,CAAAA,IAAI,CAACC,GAAL,CAASK,QAAb,CAAsBpB,oBAAoB,CAACqB,GAA3C,CAAgDrB,oBAAoB,CAACmB,QAArB,CAA8BD,SAA9B,EAAyCI,OAAzF,CAAlB,CAEAnB,aAAa,CAAG,IAAhB,CArCoB,qEAAH,kBAARC,CAAAA,QAAQ,0CAAd,CAwCP,MAAO,IAAMmB,CAAAA,OAAO,2FAAG,kBAAOC,KAAP,CAAcC,UAAd,CAA0BC,WAA1B,CAAuCC,OAAvC,yHACfxB,aADe,iDAETC,CAAAA,QAAQ,EAFC,yCAIZF,eAAe,CAAC0B,OAAhB,CAAwBL,OAAxB,CAAgCE,UAAhC,CAA4CD,KAA5C,CAAmDE,WAAnD,CAAgEC,OAAhE,EAAyEE,IAAzE,CAA8E,CAACC,IAAI,CAAC7B,cAAN,CAA9E,CAJY,0DAAH,kBAAPsB,CAAAA,OAAO,yDAAb,CAOP,MAAO,IAAMQ,CAAAA,QAAQ,2FAAG,2IAChB5B,aADgB,iDAEVC,CAAAA,QAAQ,EAFE,yCAIbF,eAAe,CAAC0B,OAAhB,CAAwBI,GAAxB,GAA8BC,IAA9B,CAAmC,CAACH,IAAI,CAAE7B,cAAP,CAAnC,CAJa,0DAAH,kBAAR8B,CAAAA,QAAQ,2CAAd,CAOP,MAAO,IAAMG,CAAAA,QAAQ,2FAAG,kBAAOC,MAAP,CAAeC,MAAf,yHAChBjC,aADgB,iDAEVC,CAAAA,QAAQ,EAFE,yCAIbF,eAAe,CAAC0B,OAAhB,CAAwBS,GAAxB,CAA4BF,MAA5B,CAAoCC,MAApC,EAA4CP,IAA5C,CAAiD,CAACC,IAAI,CAAE7B,cAAP,CAAjD,CAJa,0DAAH,kBAARiC,CAAAA,QAAQ,kDAAd","sourcesContent":["import Web3 from 'web3'\n// import auctionContractBuild from 'contracts/auction.json'\nimport auctionContractBuild from './build/contracts/Auction.json'\nlet currentAccount\nlet auctionContract\nlet isInitialized = false\n\nexport const initWeb3 = async () => {\n\n    const { ethereum } = window\n\n    if (!ethereum) {\n        console.log('Please install Metamask..')\n        return\n\n    } else {\n        try {\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n            console.log('Found account! Address: ', accounts[0])\n\n            if (accounts.lenght !== 0) {\n                console.log('Authorized account found...')\n                currentAccount = accounts[0]\n            } else {\n                console.log('No authorized account found!')\n            }\n        }catch(error){\n            console.log(error)\n        }\n    }\n\n    /**\n     * log when account is changed\n     */\n    ethereum.on('accountsChanges', (accounts)=>{\n        currentAccount = accounts[0]\n        console.log('Account changed to: ', accounts[0])\n    })\n\n    const web3 = new Web3(ethereum)\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId, \" eth net \", auctionContractBuild.networks)\n    auctionContract = new web3.eth.Contract(auctionContractBuild.abi, auctionContractBuild.networks[networkId].address)\n\n    isInitialized = true;\n}\n\nexport const addItem = async (title, base_price, description, img_url) => {\n    if(!isInitialized)\n        await initWeb3()\n\n    return auctionContract.methods.addItem(base_price, title, description, img_url).send({from:currentAccount})\n}\n\nexport const getItems = async () => {\n    if(!isInitialized)\n        await initWeb3()\n\n    return auctionContract.methods.get().call({from: currentAccount});\n}\n\nexport const placeBid = async (itemId, amount) => {\n    if(!isInitialized)\n        await initWeb3()\n\n    return auctionContract.methods.bid(itemId, amount).send({from: currentAccount});\n}"]},"metadata":{},"sourceType":"module"}